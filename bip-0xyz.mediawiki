<pre>
  BIP: xyz
  Layer: Applications
  Title: legacy message sign verify standardization
  Author: Dan Bryant <dkbryant@gmail.com>
  Comments-Summary: No comments yet.
  Comments-URI: https://github.com/brianddk/bips/wiki/Comments:BIP-0xyz
  Status: Draft
  Type: Standards Track
  Created: 2017-12-21
</pre>

==Abstract==

Standardize the existing message sign/verify functionality existing in current Bitcoin implementations.

==Motivation==

Reasons to standardize the existing process:
# Ensure that new implementations of sign/verify functions are interoperable.
# Provide a baseline for extending the sign/verify functions for new address schemes.

==Specification==

The following workflow will discribe the sign / verify functionality

===Sign Message===

# Retrieve the private key of the address that will be used in signing.
# Allocate a message buffer with the first byte of 0x18 followed by 'Bitcoin Signed Message:\n'.
## Hex: 0x18426974636f696e205369676e6564204d6573736167653a0a
# Append the length of the message to be signed to the buffer, in CompactSize encoding.
# Append the message to be signed to the buffer.
# Perform a SHA256 hash on the buffer.
# Perform a secondary SHA256 hash on the previous hash.
# Perform an ECDSA sign operation on the resultant hash using the previously retrieved key.
# Serialize the values r, s (from ECDSA) and recid (one of 0..3 for reconstruction of the public key) as follows:
## 27 + (IF is_compressed_key THEN 4 ELSE 0) + recid (1 byte)
## r (32 bytes)
## s (32 bytes)
# Base64 encode the serialized signature data.

===Verify Message===

# Allocate a message buffer with the first byte of 0x18 followed by 'Bitcoin Signed Message:\n'.
## Hex: 0x18426974636f696e205369676e6564204d6573736167653a0a
# Append the length of the message to be verified to the buffer, in CompactSize encoding.
# Append the message to be verified to the buffer.
# Perform a SHA256 hash on the buffer.
# Perform a secondary SHA256 hash on the previous hash.
# Decode the provided Base64 signature data as r, s, recid and is_compressed_key.
# Using the signature data and hash, recover the public key.
# Perform an ECDSA verify operation using the previous hash, the recovered public key and the decoded signature data.

==Backward compatibility==

No compatibility conflicts as this implementation is already standardized among many implementations.

==Implementation==

https://github.com/bitcoin/bitcoin/tree/0.8
